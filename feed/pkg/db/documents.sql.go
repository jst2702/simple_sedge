// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: documents.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
  guid,
  url, 
  site, 
  site_full, 
  site_section, 
  headline, 
  title, 
  body, 
  ticker, 
  tickers, 
  published_at, 
  language
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING guid, url, site, site_full, site_section, headline, title, body, ticker, tickers, published_at, language, created_at
`

type CreateDocumentParams struct {
	Guid        string         `json:"guid"`
	Url         string         `json:"url"`
	Site        string         `json:"site"`
	SiteFull    string         `json:"site_full"`
	SiteSection string         `json:"site_section"`
	Headline    string         `json:"headline"`
	Title       string         `json:"title"`
	Body        string         `json:"body"`
	Ticker      sql.NullString `json:"ticker"`
	Tickers     []string       `json:"tickers"`
	PublishedAt time.Time      `json:"published_at"`
	Language    sql.NullString `json:"language"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.Guid,
		arg.Url,
		arg.Site,
		arg.SiteFull,
		arg.SiteSection,
		arg.Headline,
		arg.Title,
		arg.Body,
		arg.Ticker,
		pq.Array(arg.Tickers),
		arg.PublishedAt,
		arg.Language,
	)
	var i Document
	err := row.Scan(
		&i.Guid,
		&i.Url,
		&i.Site,
		&i.SiteFull,
		&i.SiteSection,
		&i.Headline,
		&i.Title,
		&i.Body,
		&i.Ticker,
		pq.Array(&i.Tickers),
		&i.PublishedAt,
		&i.Language,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDocuemnt = `-- name: DeleteDocuemnt :exec
DELETE FROM documents
WHERE guid = $1
`

func (q *Queries) DeleteDocuemnt(ctx context.Context, guid string) error {
	_, err := q.db.ExecContext(ctx, deleteDocuemnt, guid)
	return err
}

const getDocument = `-- name: GetDocument :one
SELECT guid, url, site, site_full, site_section, headline, title, body, ticker, tickers, published_at, language, created_at FROM documents
WHERE guid = $1 LIMIT 1
`

func (q *Queries) GetDocument(ctx context.Context, guid string) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocument, guid)
	var i Document
	err := row.Scan(
		&i.Guid,
		&i.Url,
		&i.Site,
		&i.SiteFull,
		&i.SiteSection,
		&i.Headline,
		&i.Title,
		&i.Body,
		&i.Ticker,
		pq.Array(&i.Tickers),
		&i.PublishedAt,
		&i.Language,
		&i.CreatedAt,
	)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT guid, url, site, site_full, site_section, headline, title, body, ticker, tickers, published_at, language, created_at FROM documents
ORDER by guid
limit $1
OFFSET $2
`

type ListDocumentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDocuments(ctx context.Context, arg ListDocumentsParams) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, listDocuments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.Guid,
			&i.Url,
			&i.Site,
			&i.SiteFull,
			&i.SiteSection,
			&i.Headline,
			&i.Title,
			&i.Body,
			&i.Ticker,
			pq.Array(&i.Tickers),
			&i.PublishedAt,
			&i.Language,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :one
UPDATE documents
  set ticker = $2, 
  tickers = $3
WHERE guid = $1
RETURNING guid, url, site, site_full, site_section, headline, title, body, ticker, tickers, published_at, language, created_at
`

type UpdateDocumentParams struct {
	Guid    string         `json:"guid"`
	Ticker  sql.NullString `json:"ticker"`
	Tickers []string       `json:"tickers"`
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, updateDocument, arg.Guid, arg.Ticker, pq.Array(arg.Tickers))
	var i Document
	err := row.Scan(
		&i.Guid,
		&i.Url,
		&i.Site,
		&i.SiteFull,
		&i.SiteSection,
		&i.Headline,
		&i.Title,
		&i.Body,
		&i.Ticker,
		pq.Array(&i.Tickers),
		&i.PublishedAt,
		&i.Language,
		&i.CreatedAt,
	)
	return i, err
}
