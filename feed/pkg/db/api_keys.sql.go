// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: api_keys.sql

package db

import (
	"context"
)

const createApiKey = `-- name: CreateApiKey :one
INSERT INTO api_keys (
    api_key
) VALUES (
    $1
) RETURNING api_key, active, created_at
`

func (q *Queries) CreateApiKey(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createApiKey, apiKey)
	var i ApiKey
	err := row.Scan(&i.ApiKey, &i.Active, &i.CreatedAt)
	return i, err
}

const disableApiKey = `-- name: DisableApiKey :one
UPDATE api_keys
SET
    active = FALSE
WHERE api_key = $1
RETURNING api_key, active, created_at
`

func (q *Queries) DisableApiKey(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, disableApiKey, apiKey)
	var i ApiKey
	err := row.Scan(&i.ApiKey, &i.Active, &i.CreatedAt)
	return i, err
}

const getApiKey = `-- name: GetApiKey :one
SELECT api_key, active, created_at FROM api_keys
WHERE api_key = $1 LIMIT 1
`

func (q *Queries) GetApiKey(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getApiKey, apiKey)
	var i ApiKey
	err := row.Scan(&i.ApiKey, &i.Active, &i.CreatedAt)
	return i, err
}
