// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sentiment_scores.sql

package data

import (
	"context"
)

const createScore = `-- name: CreateScore :one
INSERT INTO sentiment_scores (
  model_id, document_guid, sentiment, confidence
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, model_id, document_guid, sentiment, confidence, created_at
`

type CreateScoreParams struct {
	ModelID      int64  `json:"model_id"`
	DocumentGuid string `json:"document_guid"`
	Sentiment    int64  `json:"sentiment"`
	Confidence   int64  `json:"confidence"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (SentimentScore, error) {
	row := q.db.QueryRowContext(ctx, createScore,
		arg.ModelID,
		arg.DocumentGuid,
		arg.Sentiment,
		arg.Confidence,
	)
	var i SentimentScore
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.DocumentGuid,
		&i.Sentiment,
		&i.Confidence,
		&i.CreatedAt,
	)
	return i, err
}

const deleteScore = `-- name: DeleteScore :exec
DELETE FROM sentiment_scores
WHERE id = $1
`

func (q *Queries) DeleteScore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScore, id)
	return err
}

const getScore = `-- name: GetScore :one
SELECT id, model_id, document_guid, sentiment, confidence, created_at FROM sentiment_scores
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetScore(ctx context.Context, id int64) (SentimentScore, error) {
	row := q.db.QueryRowContext(ctx, getScore, id)
	var i SentimentScore
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.DocumentGuid,
		&i.Sentiment,
		&i.Confidence,
		&i.CreatedAt,
	)
	return i, err
}

const listScores = `-- name: ListScores :many
SELECT id, model_id, document_guid, sentiment, confidence, created_at FROM sentiment_scores
ORDER by id
limit $1
OFFSET $2
`

type ListScoresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListScores(ctx context.Context, arg ListScoresParams) ([]SentimentScore, error) {
	rows, err := q.db.QueryContext(ctx, listScores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SentimentScore{}
	for rows.Next() {
		var i SentimentScore
		if err := rows.Scan(
			&i.ID,
			&i.ModelID,
			&i.DocumentGuid,
			&i.Sentiment,
			&i.Confidence,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScore = `-- name: UpdateScore :one
UPDATE sentiment_scores
  set sentiment = $2,
  confidence = $3
WHERE id = $1
RETURNING id, model_id, document_guid, sentiment, confidence, created_at
`

type UpdateScoreParams struct {
	ID         int64 `json:"id"`
	Sentiment  int64 `json:"sentiment"`
	Confidence int64 `json:"confidence"`
}

func (q *Queries) UpdateScore(ctx context.Context, arg UpdateScoreParams) (SentimentScore, error) {
	row := q.db.QueryRowContext(ctx, updateScore, arg.ID, arg.Sentiment, arg.Confidence)
	var i SentimentScore
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.DocumentGuid,
		&i.Sentiment,
		&i.Confidence,
		&i.CreatedAt,
	)
	return i, err
}
