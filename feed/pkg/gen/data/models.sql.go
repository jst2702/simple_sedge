// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: models.sql

package data

import (
	"context"
	"database/sql"
)

const createModel = `-- name: CreateModel :one
INSERT INTO models (
  name, role, description
) VALUES (
  $1, $2, $3
)
RETURNING id, name, role, description, created_at
`

type CreateModelParams struct {
	Name        string         `json:"name"`
	Role        string         `json:"role"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRowContext(ctx, createModel, arg.Name, arg.Role, arg.Description)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
DELETE FROM models
WHERE id = $1
`

func (q *Queries) DeleteModel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteModel, id)
	return err
}

const getModel = `-- name: GetModel :one
SELECT id, name, role, description, created_at FROM models
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetModel(ctx context.Context, id int64) (Model, error) {
	row := q.db.QueryRowContext(ctx, getModel, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listModels = `-- name: ListModels :many
SELECT id, name, role, description, created_at FROM models
ORDER by id
limit $1
OFFSET $2
`

type ListModelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListModels(ctx context.Context, arg ListModelsParams) ([]Model, error) {
	rows, err := q.db.QueryContext(ctx, listModels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Model{}
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Role,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModel = `-- name: UpdateModel :one
UPDATE models
  set name = $2, 
  role = $3, 
  description = $4
WHERE id = $1
RETURNING id, name, role, description, created_at
`

type UpdateModelParams struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Role        string         `json:"role"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRowContext(ctx, updateModel,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.Description,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
